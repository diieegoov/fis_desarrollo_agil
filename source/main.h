// Universidad de La Laguna
// Escuela Superior de Ingenier√≠a y Tecnolog√≠a
// Grado en Ingenier√≠a Inform√°tica
// Asignatura: FIS
// Curso: 2¬∫
// Pr√°ctica Desarrollo √°gil: Historias de usuario y criterios de aceptaci√≥n
// Autor: Diego Vegas Acosta
// Correo: alu0101651361@ull.edu.es
// Fecha: 22/04/2025
// Archivo main.h: Fichero con funciones auxiliares al main

#ifndef MAIN_H
#define MAIN_H

#include "functions.h"

/// @brief Imprime las opciones prelogin
void PreOptions() {
  std::cout << "1. Registrarse\n";
  std::cout << "2. Iniciar sesi√≥n\n";
  std::cout << "3. Ver informaci√≥n de la aplicaci√≥n\n";
  std::cout << "4. Recuperar correo\n";
  std::cout << "5. Recuperar contrase√±a\n";
  std::cout << "0. Salir\n";
}


/// @brief Imprime la informaci√≥n de la aplicaci√≥n
void Info() {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    std::cout << "‚ïë                 üöÄ BIENVENIDO A NOTACOLLAB üöÄ                ‚ïë\n";
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n";
    std::cout << "‚ïë üåê  Tu espacio de trabajo TODO-EN-UNO                        ‚ïë\n";
    std::cout << "‚ïë      para equipos creativos y organizados                    ‚ïë\n";
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

    std::cout << "üìå FUNCIONALIDADES DESTACADAS:\n";
    std::cout << "   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
    std::cout << "   ‚îÇ üìù Notas colaborativas en tiempo real              ‚îÇ\n";
    std::cout << "   ‚îÇ ‚úÖ Gesti√≥n de tareas con tableros Kanban           ‚îÇ\n";
    std::cout << "   ‚îÇ üìÖ Calendarios integrados con alertas              ‚îÇ\n";
    std::cout << "   ‚îÇ üóÇÔ∏è  Bases de datos flexibles y personalizables      ‚îÇ\n";
    std::cout << "   ‚îÇ üîó Integraci√≥n con correo, Google Calendar y m√°s   ‚îÇ\n";
    std::cout << "   ‚îÇ üß† Wikis y documentaci√≥n organizadas por proyectos ‚îÇ\n";
    std::cout << "   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n";

    std::cout << "üë• PARA EQUIPOS COMO:\n";
    std::cout << "   üìå Desarrolladores        üìå Dise√±adores\n";
    std::cout << "   üìå Equipos de marketing   üìå Estudiantes\n\n";

    std::cout << "‚ú® VENTAJAS DE USAR NOTACOLLAB:\n";
    std::cout << "   üîÑ Sincronizaci√≥n en tiempo real\n";
    std::cout << "   üß© Interfaz modular y 100% personalizable\n";
    std::cout << "   üí° Mejora la productividad y organizaci√≥n\n";
    std::cout << "   üìä Todo tu trabajo en un solo lugar\n\n";

    std::cout << "üí¨ \"Organiza tu caos creativo con estilo.\"\n";
    std::cout << "üõ†Ô∏è  ¬°Transforma ideas en acci√≥n desde un solo panel!\n";

    std::cout << "\nüìé Vis√≠tanos: https://www.notacollab.app\n";
    std::cout << "üì¨ Contacto: soporte@notacollab.app\n";
    std::cout << "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
}


void AdminMenu(Client* client) {
  int option{-1};
  while (option != 0) {
    std::cout << "\n--- MEN√ö ADMINISTRADOR ---\n";
    std::cout << "1. Crear proyecto\n";
    std::cout << "2. Invitar colaboradores\n";
    std::cout << "3. Acceder a proyecto\n";
    std::cout << "0. Cerrar sesi√≥n\n";
    std::cout << "--- MEN√ö ADMINISTRADOR ---\n";

    std::cin >> option;
    switch (option) {
      case 0: {
        system("clear");
        client->Logout();
        break;
      }

      case 1: {
        system("clear");
        CrearProyecto(client);
        break;
      }

      case 2: {
        system("clear");
        InvitarColab(client);
        break;
      }

      case 3: {
        system("clear");
        AccederProyecto(client);
        break;
      }
    }
  }
}


void UserMenu(Client* client) {
  int option{-1};
  while (option != 0) {
    std::cout << "\n--- MEN√ö USUARIO ---\n";
    std::cout << "1. Acceder a proyecto\n";
    std::cout << "0. Cerrar sesi√≥n\n";
    std::cout << "--- MEN√ö USUARIO ---\n";

    std::cin >> option;
    switch (option) {
      case 0: {
        system("clear");
        client->Logout();
        break;
      }

      case 1: {
        system("clear");
        AccederProyecto(client);
        break;
      }
    }
  }
}


/// @brief Muestra men√∫ sin haberse logeado y sus opciones
void Menu() {
  int opcion = -1;
  while(opcion != 0) {
    std::cout << "--- MEN√ö PRINCIPAL ---\n";
    PreOptions();
    std::cout << "--- MEN√ö PRINCIPAL ---\n";
    std::cin >> opcion; 
    switch (opcion) {
      case 1: {
        system("clear");
        SignIn();
        break;
      }

      case 2: {
        system("clear");
        std::string result = Login();
        if (result == "0") {
          break;
        } else {
          Client* cliente = BuildClient(result);
          cliente->Login();  // Se llama al login del rol correspondiente
          if (cliente->GetRole()) {
            AdminMenu(cliente);
          } else {
            UserMenu(cliente);
          }
        }
        break;
      }

      case 3: {
        system("clear");
        Info();
        break;
      }

      case 4: {
        system("clear");
        RecoverEmail();
        break;
      }

      case 5: {
        system("clear");
        RecoverPassword();
        break;
      }

      case 0: {
        std::cout << "Saliendo del programa...\n";
        break;
      }

      default : {
        system("clear");
        PreOptions();
        break;
      }
    }
  }
}

#endif